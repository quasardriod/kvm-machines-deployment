---

- hosts: all
  gather_facts: true

  vars:
    images_to_be_download: []

  tasks:
  - name: prepare-kvm | Ensure libvirtd is running
    ansible.builtin.systemd:
      name: libvirtd
      state: started
      enabled: true
    when: ansible_os_family == "RedHat"

  - name: prepare-kvm | Ensure {{ IMAGES_STORE }} directory exists
    ansible.builtin.file:
      path: "{{ IMAGES_STORE }}"
      state: directory
      mode: '0755'
      owner: root
      group: root

  - name: prepare-kvm | Ensure {{ IMAGE_TEMPLATE_STORE }} directory exists
    ansible.builtin.file:
      path: "{{ IMAGE_TEMPLATE_STORE }}"
      state: directory
      mode: '0755'
      owner: root
      group: root

  - name: prepare-kvm | Get  list of all variants available on the host
    ansible.builtin.shell: virt-install --os-variant list
    register: virt_install_list_variants
    changed_when: false

  - name: prepare-kvm | Ensure 'VARIANTS' are available on the host
    ansible.builtin.assert:
      that:
      - item in virt_install_list_variants.stdout_lines
      fail_msg: "The variant '{{ item }}' is not available on the host"
      success_msg: "The variant '{{ item }}' is available on the host"
      msg: "The variant '{{ item }}' is not available on the host"
    with_items: "{{ VARIANTS }}"
    when: ansible_os_family == "RedHat"

  - name: prepare-kvm | Get list of all networks available on the host
    ansible.builtin.shell: virsh net-list|egrep 'active'|awk '{print $1}'
    register: virt_install_list_networks
    changed_when: false
    failed_when: false
    when: ansible_os_family == "RedHat"

  - name: prepare-kvm | Ensure 'KVM_NETWORKS' are available on the host
    ansible.builtin.assert:
      that:
      - item in virt_install_list_networks.stdout_lines
      fail_msg: "The network '{{ item }}' is not available on the host"
      success_msg: "The network '{{ item }}' is available on the host"
      msg: "The network '{{ item }}' is not available on the host"
    with_items: "{{ KVM_NETWORKS }}"
    when: ansible_os_family == "RedHat"

  - name: prepare-kvm | Lookup qcow2 images in store
    ansible.builtin.find:
      paths: "{{ IMAGE_TEMPLATE_STORE }}"
      patterns: "*.qcow2"
      recurse: no
      file_type: file
    register: qcow2_images_list

  - name: prepare-kvm | Set fact 'images_list_in_store'
    ansible.builtin.set_fact:
      images_list_in_store: "{{ qcow2_images_list.files | map(attribute='path') | list }}"

  - name: prepare-kvm | Show available qcow2 images in store
    ansible.builtin.debug:
      msg: "{{ images_list_in_store }}"

  - name: prepare-kvm | Append 'cloud_images' to be downloaded from public image source
    ansible.builtin.set_fact:
      images_to_be_download: "{{ images_to_be_download + [{'variant': item[0].variant, 'download_uri': item[0].download_uri, 'image': item[1]}] }}"
    with_nested:
    - "{{ cloud_images }}"
    - "{{ all_images }}"
    when:
    - item[1] in item[0].images
    - images_list_in_store is not search(item[1])
    loop_control:
      label: "{{ item[0].variant }} - {{ item[1] }}"
    vars:
      all_images: "{{ cloud_images | map(attribute='images') | list | sum(start=[]) }}"
      # base_name_list: "{{ cloud_images | map(attribute='variant') | map('regex_replace', '-.*|[0-9]', '') | list }}"

  - name: prepare-kvm | Show images to be downloaded
    ansible.builtin.debug:
      msg: "{{ images_to_be_download }}"

  - name: prepare-kvm | Download images from public image source
    ansible.builtin.get_url:
      url: "{{ item.download_uri }}/{{ item.image }}"
      dest: "{{ IMAGE_TEMPLATE_STORE }}/"
      mode: '0644'
      owner: root
      group: root
    with_items: "{{ images_to_be_download }}"
    when: images_to_be_download|length > 0
    register: download_images
